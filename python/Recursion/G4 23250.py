def hanoi(n, k, a, b, c):
    # case 1 (k == 2**(n-1)): k번째 디스크 옮김 -> 답
    # 트리의 중앙
    if k == 2**(n-1): return f'{a} {c}'
    
    # case 2 (k>2**(n-1)): 
    # 트리의 우측
    # 크기 큰 디스크는 이미 c로 옮겼고, b에 있던 크기가 작은 디스크들을 c로 옮기는 중.
    # n 크기 하노이의 k번째 이동은 n-1크기 하노이의 k-2**(n-1)번째 이동과 같음.
    # 10 크기 하노이의 600번째 이동은, 9크기 하노이의 88(600-512)번째 이동.
    # 하지만 시작지점과 도착지점은 바뀜.
    elif k > 2**(n-1): return hanoi(n-1, k-2**(n-1), b, a, c) 

    # case 3 (k<2**(n-1)): 
    # 트리의 좌측
    # 큰 디스크를 c로 옮기고자 작은 디스크들을 b로 옮기는 중.
    else: return hanoi(n-1, k, a, c, b)

n, k = map(int, input().split())
print(hanoi(n, k, 1, 2, 3))