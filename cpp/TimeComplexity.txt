// 최소 스패닝 트리 ////////////////////////////////////////////////////////////////////////////////
// Kruskal: O(ElogE) 정렬 + Union-Find(사실상 O(1)에 근접)
    DSU dsu(V);
    ll total = 0;
    int cnt = 0;
    for(auto &e : edges){
        if(dsu.unite(e.u, e.v)){
            total += e.w;
            cnt++;
            if(cnt == V-1) break;
        }
    }

// Prim: O(V^2) or O(VlogV + ElogV) = O((V+E)logV)(인접 리스트 + 우선순위 큐 (힙) 사용 시, 모든 간선 E에 대해 힙에 넣는 시간 O(logV))
    for(auto p: g[1]) pq.push({p.second, p.first});
    visited[1] = true;
    while(!pq.empty()){
        int nv = pq.top().second;
        int w = pq.top().first;
        pq.pop();

        if(visited[nv]) continue;
        visited[nv] = true;
        ans += w;

        for(auto p: g[nv]){
            if(!visited[p.first]){
                pq.push({p.second, p.first});
            }
        }
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////

// 거리 계산 //////////////////////////////////////////////////////////////////////////////////////////

// Dijkstra: O(V^2) or O((V+E)logV)(heap) 음의 가중치 존재 시 사용 불가

// Bellman Ford 벨만 포드: O(VE) // 음의 가중치 존재 시, negative cycle 판별
def bellman_ford(start):
    weights[start] = 0
    for i in range(V): // O(V)
        for src, dst, weight in graph: // O(E)
            W = weights[src] + weight
            if weights[src] != INF and weights[dst] > W:
                weights[dst] = W
                if i == V -1:
                    return False # negative cycle exists
    return True # there is no cycle

// Floyd Warshall 플로이드 워셜: O(V^3): 모든 정점에 대해 다른 정점까지의 최단거리 계산 시
for k in range(1, V+1): # via
    graph[k][k] = 0 # 사이클 없으므로 자기 자신 0
    for i in range(1, V+1): # src
        for j in range(1, V+1): # dst
            graph[i][j] = min(graph[i][j], graph[i][k]+graph[k][j])

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////